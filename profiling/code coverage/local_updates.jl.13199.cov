        - function local_updates(s::Stack, p::Parameters, l::Lattice)
     1040   acc_rat = 0.0
     1040   @inbounds for i in 1:l.sites
    64640     @inbounds new_op = p.hsfield[:,i,s.current_slice] + rand(p.box, 3)
    64640     exp_delta_S_boson = exp(- calculate_boson_action_diff(p, l, i, s.current_slice, new_op) )
    64640     detratio = calculate_detratio(s,p,l,i,new_op)
        - 
        - 
    64640     if abs.(imag(detratio))/abs.(real(detratio)) > 1e-4
        0       @printf("%d, %d \t Determinant ratio isn't real. \t abs imag: %.3e \t relative: %.1f%%\n", s.current_slice, i, abs.(imag(detratio)), abs.(imag(detratio))/abs.(real(detratio))*100)
    64640     elseif real(detratio) < 0
        0       println("Negative fermion weight.")
    64640     elseif detratio == 0
        0       println("Encountered non-invertible M with det = 0.")
        -     end
        - 
    64640     p_acc = exp_delta_S_boson * real(detratio)
        - 
    64640     if p_acc > 1.0 || rand() < p_acc
    42424       acc_rat += 1
    42424       p.hsfield[:,i,s.current_slice] = new_op[:]
    42424       p.boson_action += -log(exp_delta_S_boson)
    42424       update_greens!(s,p,l,i)
        -     end
        -   end
     1040   return acc_rat / l.sites
        - end
        - 
        - 
        - function calculate_detratio(s::Stack, p::Parameters, l::Lattice, i::Int, new_op::Vector{Float64})
    64640   @inbounds V1i = interaction_matrix_exp_op(p,l,p.hsfield[:,i,s.current_slice],-1.)
    64640   V2i = interaction_matrix_exp_op(p,l,new_op)
    64640   s.delta_i = V1i * V2i  - eye_flv
    64640   @inbounds s.M = eye_flv + s.delta_i * (eye_flv - s.greens[i:l.sites:end,i:l.sites:end])
    64640   return det(s.M)
        - end
        - 
        - 
        - function update_greens!(s::Stack, p::Parameters, l::Lattice, i::Int)
        -   # first_term = (s.greens - eye_full)[:,i:l.sites:end] * inv(s.M)
    42424   @inbounds first_term = /((s.greens - eye_full)[:,i:l.sites:end], s.M)
    42424   @inbounds second_term = s.delta_i * s.greens[i:l.sites:end,:]
    42424   s.greens = s.greens + first_term * second_term
        - end
